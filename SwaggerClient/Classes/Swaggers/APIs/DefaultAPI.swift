//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersGet(completion: @escaping ((_ data: Userss?,_ error: Error?) -> Void)) {
        usersGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /users
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<Userss> 
     */
    open class func usersGetWithRequestBuilder() -> RequestBuilder<Userss> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Userss>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path) The user&#39;s id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersIdDelete(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        usersIdDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - DELETE /users/{id}
     
     - parameter id: (path) The user&#39;s id 

     - returns: RequestBuilder<Void> 
     */
    open class func usersIdDeleteWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/users/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path) The user&#39;s id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersIdGet(id: Int32, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        usersIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /users/{id}
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "id" : 0,
  "avatar" : "aeiou",
  "isPremium" : true
}}]
     
     - parameter id: (path) The user&#39;s id 

     - returns: RequestBuilder<Users> 
     */
    open class func usersIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Users> {
        var path = "/users/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Users>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path) The user&#39;s id 
     - parameter users: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersIdPut(id: Int32, users: Users? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        usersIdPutWithRequestBuilder(id: id, users: users).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - PUT /users/{id}
     
     - parameter id: (path) The user&#39;s id 
     - parameter users: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func usersIdPutWithRequestBuilder(id: Int32, users: Users? = nil) -> RequestBuilder<Void> {
        var path = "/users/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: users)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter users: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersPost(users: Users? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        usersPostWithRequestBuilder(users: users).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /users
     
     - parameter users: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func usersPostWithRequestBuilder(users: Users? = nil) -> RequestBuilder<Void> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: users)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
